#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <set>
#include <cassert>
using namespace std;

struct Node{
   Node* next;
   Node* prev;
   int value;
   int key;
   Node(Node* p, Node* n, int k, int val):prev(p),next(n),key(k),value(val){};
   Node(int k, int val):prev(NULL),next(NULL),key(k),value(val){};
};

class Cache{
   
   protected: 
   map<int,Node*> mp; //map the key to the node in the linked list
   int cp;  //capacity
   Node* tail; // double linked list tail pointer
   Node* head; // double linked list head pointer
   virtual void set(int, int) = 0; //set function
   virtual int get(int) = 0; //get function

};

class LRUCache:public Cache
{
    public:
    LRUCache(int cap){ 
        cp = cap; 
        head = NULL;
        tail = NULL;
    }
    
    void set(int key, int val){
        if(mp.find(key) != mp.end()){
            auto new_node = mp[key];
            new_node->value = val;
            
            //Delete node
            auto node_del = mp[key];
            DeleteAnyNode(node_del);            
                
            //Add node to head
            InsertHeadNode(new_node);            
        }
        
        else if(mp.size() > cp){
            auto node_del = tail;
            mp.erase(node_del->key);
            DeleteAnyNode(node_del);
            delete node_del;
            Node *new_node = new Node(key, val);            
            InsertHeadNode(new_node);
            mp.insert(make_pair(key, new_node));
        }
        
        else{
            Node *new_node = new Node(key, val);            
            InsertHeadNode(new_node);
            mp.insert(make_pair(key, new_node));
        }
        
        
    }
    
    int get(int key)
    {
        if(mp.find(key) != mp.end()){
            auto new_node = mp[key];
            //Add node to head
            InsertHeadNode(new_node);            
            return new_node->value;
        }
        else
            return -1;
    }
    
    void InsertHeadNode(Node *node){
        if(!node)
            return;
        if(head)
            head->prev = node;
        node->next = head;
        node->prev = nullptr;
        if( !tail ) 
            tail = node;
        head = node;    
    }
    
    void DeleteAnyNode(Node *node_del){
        if(!node_del)
            return;
        if(node_del->prev)
            node_del->prev->next = node_del->next;
        if(node_del->next)
            node_del->next->prev = node_del->prev;
        if(node_del == head)
            head = node_del->next;
        if(node_del == tail)
            tail = node_del->prev;    
    }
    
};

int main() {
   int n, capacity,i;
   cin >> n >> capacity;
   LRUCache l(capacity);
   for(i=0;i<n;i++) {
      string command;
      cin >> command;
      if(command == "get") {
         int key;
         cin >> key;
         cout << l.get(key) << endl;
      } 
      else if(command == "set") {
         int key, value;
         cin >> key >> value;
         l.set(key,value);
      }
   }
   return 0;
}
