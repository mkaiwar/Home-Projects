Appendix A
A.	1 Program
% The corner detection algorithm is derived from:
X.C. He and N.H.C. Yung, Curvature Scale Space Corner Detector with Adaptive Threshold and Dynamic Region of Support, Proceedings of the17th International Conference on Pattern Recognition, 2:791-794, August 2004. Improved algorithm is included in : X.C. He and N.H.C. Yung, “Corner detector based on global and local curvature properties”, Optical Engineering, 47(5), pp: 057008, 2008.The displayBezier function is the original work of: Programmer: Aaron Wetzler, aaronwetzler@gmail.com Date:12/12/2009. The find control points function is entirely derived from the work of Oleg V Polikarpotchkin. We have simply ported it from his .NET code on codeProject and applied Matlabs matrix features to enable it to be multi-dimensional.

function [c,marked_img]=corner(varargin)
close all
clc
[I,C,T_angle,sig,H,L,Endpoint,Gap_size] = parse_inputs(varargin{:}); %Preprocess the input image
if size(I,3)==3
    I=rgb2gray(I); % Transform RGB image to a Gray image. 
end
tic
BW=edge(I,'canny',[L,H]);  % Detect edges using canny edge detector
disp('..............................Displaying edge image..................................')
time_for_detecting_edge=toc
tic
[curve,curve_start,curve_end,curve_mode,curve_num,BWx,BWy]=extract_curve(BW,Gap_size);  % Extract curves
time_for_extracting_curve=toc
tic
cout=get_corner(curve,curve_start,curve_end,curve_mode,curve_num,BW,sig,Endpoint,C,T_angle); % Corner detector based on global and local curvature properties
time_for_detecting_corner=toc
 
img=I;
for i=1:size(cout,1)
    img=mark(img,cout(i,1),cout(i,2),5); % Mark the corners on the processed image
end
marked_img=img;
figure(3)
disp('............................Displaying Horiztal edges...............................')
imshow(BWx)
title('Horizontal edges')
figure(4)
disp('........................... Displaying Vertical edges...............................')
imshow(BWy)
title('Vertical edges')
figure(5)
disp('............................Displaying detected corners.............................')
imshow(marked_img);
title('Detected corners')
imwrite(marked_img,'corner.jpg')
 
 
%Apply conditions based on assumptions
z=size(cout);
l=z(1);
h=z(2);
b=l*h;
for i=1:l
    x(i)=cout(b); % Extract x co-ordinates from cout
    b=b-1;
end
for i=1:l
    y(i)=cout(l);   % Extract y co-ordinates from cout
    l=l-1;
end
DI=743; % Choose diagonal length
l=z(1);
rad=180/pi;
% Intialize counters for different ROIs
c1=0; 
c2=0;
c3=0;
c4=0;
c5=0;
c6=0;
x55=0;
y55=0;
x66=0;
y66=0;
%Determine corners located at 6 different ROIs
for i=1:l
    if (x(i)<=200 & y(i)<=100)
        c1=c1+1;
        x11(i)=x(i);
        y11(i)=y(i);
    elseif (x(i)>=400 & x(i)<=600 & y(i)<=100)
        c2=c2+1;
        x22(i)=x(i);
        y22(i)=y(i);
    elseif (x(i)<=200 & y(i)>=341 & y(i)<=441)
        c3=c3+1;
        x33(i)=x(i);
        y33(i)=y(i);
    elseif (x(i)>=400 & x(i)<=600 & y(i)>=341 & y(i)<=441)
        c4=c4+1;
        x44(i)=x(i);
        y44(i)=y(i);
    elseif (y(i)>=120 & y(i)<=290 & x(i)< 200)
        x55(i)=x(i);
        y55(i)=y(i);
        c5=c5+1;
    elseif (y(i)>=120 & y(i)<=290 & x(i)> 400)
        x66(i)=x(i);
        y66(i)=y(i);
        c6=c6+1;
    end
end
%Remove non-zero pixel values
x1 = x11(x11~=0);
x2 = x22(x22~=0);
x3 = x33(x33~=0);
x4 = x44(x44~=0);
y1 = y11(y11~=0);
y2 = y22(y22~=0);
y3 = y33(y33~=0);
y4 = y44(y44~=0);
x5 = x55(x55~=0);
y5 = y55(y55~=0);
x6 = x66(x66~=0);
y6 = y66(y66~=0);
 
%DOOR CORNER CANDIDATES GROUPING
%Apply thresholds as indicated below
%Assumption 1. HeightThresL < Siz12, Siz34 < HeightThresH  WidthThresL < Siz23, Siz41 < WidthThresH  
%Assumption 2. Dir23, Dir41 <DirectionThresL & Dir12, Dir34 > DirectionThresH 
%Match 1st and 2nd regions
for i=1:c1              
    for j=1:c2
        S1(i,j)=sqrt((x1(i)-x2(j))^2+(y1(i)-y2(j))^2)/DI; %Ratio between length of Lij and the length of the diagonal 
        D1(i,j)=atan(abs(x1(i)-x2(j))/(abs(y1(i)-y2(j))))*rad; %Direction of Lij corresponding to the horizontal axis
        if (S1(i,j)>=0.5 & S1(i,j)<=0.6 & D1(i,j)>=87) % Threshold length ratio between 0.5 and 0.6 and direction greater than 85
             x111h(i)=x1(i);
             x222h(j)=x2(j);
             y111h(i)=y1(i);
             y222h(j)=y2(j);
        end
    end
end
Dir12=D1(:);
x1h=x111h(x111h~=0);     %Obtain non zero co-ordinates matching the thresholds;
y1h=y111h(y111h~=0);
x2h=x222h(x222h~=0);
y2h=y222h(y222h~=0);
%Match 2nd and 4th regions
for i=1:c2             
    for j=1:c4
        S2(i,j)=sqrt((x2(i)-x4(j))^2+(y2(i)-y4(j))^2)/DI;   %Ratio between length of Lij and the length of the diagonal 
        D2(i,j)=90-atan(abs(x2(i)-x4(j))/(abs(y2(i)-y4(j))))*rad;    %Direction of Lij corresponding to the horizontal axis
        if (S2(i,j)>=0.5 & S2(i,j)<=0.6 & D2(i,j)>=87 )% Threshold length ratio between 0.5 and 0.6 and direction greater than 85
             x222v(i)=x2(i);
             x444v(j)=x4(j);
             y222v(i)=y2(i);
             y444v(j)=y4(j);
        end
    end
end
Dir24=D2(:);
x2v=x222v(x222v~=0);%Obtain non zero co-ordinates matching the thresholds
y2v=y222v(y222v~=0);
x4v=x444v(x444v~=0);
y4v=y444v(y444v~=0);
%Match 3rd and 4th regions
for i=1:c3         
    for j=1:c4
        S3(i,j)=sqrt((x3(i)-x4(j))^2+(y3(i)-y4(j))^2)/DI;%Ratio between length of Lij and the length of the diagonal 
        D3(i,j)=atan(abs(x3(i)-x4(j))/(abs(y3(i)-y4(j))))*rad;%Direction of Lij corresponding to the horizontal axis
        if (S3(i,j)>=0.5 & S3(i,j)<=0.6 & D3(i,j)>=87) % Threshold length ratio between 0.5 and 0.6 and direction greater than 85
             x333h(i)=x3(i);
             x444h(j)=x4(j);
             y333h(i)=y3(i);
             y444h(j)=y4(j);
        end
    end
end
Dir34=D3(:);
x3h=x333h(x333h~=0);%Obtain non zero co-ordinates matching the thresholds
y3h=y333h(y333h~=0);
x4h=x444h(x444h~=0);
y4h=y444h(y444h~=0);
%Match 1st and 3rd regions
for i=1:c1        
    for j=1:c3
        S4(i,j)=sqrt((x1(i)-x3(j))^2+(y1(i)-y3(j))^2)/DI;    %Ratio between length of Lij and the length of the diagonal 
        D4(i,j)=90-atan(abs(x1(i)-x3(j))/(abs(y1(i)-y3(j))))*rad;   %Direction of Lij corresponding to the horizontal axis
        if (S4(i,j)>=0.5 & S4(i,j)<=0.6 & D4(i,j)>=88)      % Threshold length ratio between 0.5 and 0.6 and direction greater than 88
             x111v(i)=x1(i);
             x333v(j)=x3(j);
             y111v(i)=y1(i);
             y333v(j)=y3(j);
        end
    end
end
Dir13=D4(:);
x1v=x111v(x111v~=0);     %Obtain non zero co-ordinates matching the thresholds
y1v=y111v(y111v~=0);
x3v=x333v(x333v~=0);
y3v=y333v(y333v~=0);
 
%Determine common vertical and horizontal corners that passed the
%thresholds
%Make the vectors of comaparable sizes by zero padding
x1vv=0;
x1hh=0;
sizex1h=length(x1h);
sizex1v=length(x1v);
if (sizex1h ~= sizex1v)
   o=abs(sizex1h-sizex1v);
   if sizex1h>sizex1v
       x1vv=[x1v,zeros(1,o)];
       x1hh=x1h;
       y1vv=[y1v,zeros(1,o)];
       y1hh=y1h;
   elseif sizex1v>sizex1h
       x1hh=[x1h,zeros(1,o)];
       x1vv=x1v;
       y1hh=[y1h,zeros(1,o)];
       y1vv=y1v;
   end
else
       x1hh=x1h;
       x1vv=x1v;
       y1hh=y1h;
       y1vv=y1v;
end
%Compare and find common co-ordinates satisfying all the thresholds
for i =1:length(x1vv)
    for j=1:length(x1vv)
        if x1vv(i)==x1hh(j)
            x1ff(i)=x1vv(i);
        end
        if y1vv(i)==y1hh(j)
            y1ff(i)=y1vv(i);
        end
    end
end
x1f=x1ff(x1ff~=0);
y1f=y1ff(y1ff~=0);
%Make the vectors of comaparable sizes by zero padding
x2vv=0;
x2hh=0;
sizex2h=length(x2h);
sizex2v=length(x2v);
if (sizex2h ~= sizex2v)
   i=abs(sizex2h-sizex2v);
   if sizex2h>sizex2v
       x2vv=[x2v,zeros(1,i)];
       x2hh=x2h;
       y2vv=[y2v,zeros(1,i)];
       y2hh=y2h;
   elseif sizex2v>sizex2h
       x2hh=[x2h,zeros(1,i)];
       x2vv=x2v;
       y2hh=[y2h,zeros(1,i)];
       y2vv=y2v;
  end
else
    x2hh=x2h;
    x2vv=x2v;
    y2hh=y2h;
    y2vv=y2v;
end
%Compare and find common co-ordinates satisfying all the thresholds
for i =1:length(x2vv)
    for j=1:length(x2vv)
        if x2vv(i)==x2hh(j)
            x2ff(i)=x2vv(i);
        end
        if y2vv(i)==y2hh(j)
            y2ff(i)=y2vv(i);
        end
    end
end
x2f=x2ff(x2ff~=0);
y2f=y2ff(y2ff~=0);
%Make the vectors of comaparable sizes by zero padding
x3vv=0;
x3hh=0;
sizex3h=length(x3h);
sizex3v=length(x3v);
if (sizex3h ~= sizex3v)
   e=abs(sizex3h-sizex3v);
   if sizex3h>sizex3v
       x3vv=[x3v,zeros(1,e)];
       x3hh=x3h;
       y3vv=[y3v,zeros(1,e)];
       y3hh=y3h;
   elseif sizex3v>sizex3h
       x3hh=[x3h,zeros(1,e)];
       x3vv=x3v;
       y3hh=[y3h,zeros(1,e)];
       y3vv=y3v;
   end
else
   x3hh=x3h;
   x3vv=x3v;
   y3hh=y3h;
   y3vv=y3v;
end
%Compare and find common co-ordinates satisfying all the thresholds
for i =1:length(x3vv)
    for j=1:length(x3vv)
        if x3vv(i)==x3hh(j)
            x3ff(i)=x3vv(i);
        end
        if y3vv(i)==y3hh(j)
            y3ff(i)=y3vv(i);
        end
    end
end
x3f=x3ff(x3ff~=0);
y3f=y3ff(y3ff~=0);
%Make the vectors of comaparable sizes by zeo padding
x4vv=0;
x4hh=0;
sizex4h=length(x4h);
sizex4v=length(x4v);
if (sizex4h ~= sizex4v)
   u=abs(sizex4h-sizex4v);
   if sizex4h>sizex4v
       x4vv=[x4v,zeros(1,u)];
       x4hh=x4h;
       y4vv=[y4v,zeros(1,u)];
       y4hh=y4h;
   elseif sizex4v>sizex4h
       x4hh=[x4h,zeros(1,u)];
       x4vv=x4v;
       y4hh=[y4h,zeros(1,u)];
       y4vv=y4v;
   end
else
   x4hh=x4h;
   x4vv=x4v;
   y4hh=y4h;
   y4vv=y4v;
end
%Compare and find common co-ordinates satisfying all the thresholds
for i =1:length(x4vv)
    for j=1:length(x4vv)
        if x4vv(i)==x4hh(j)
            x4ff(i)=x4vv(i);
        end
        if y4vv(i)==y4hh(j)
            y4ff(i)=y4vv(i);
        end
    end
end
x4f=x4ff(x4ff~=0);
y4f=y4ff(y4ff~=0);
 
for i=1:length(x1f)
    for j=1:length(x3f)
        D13(i,j)=90-atan(abs(x1f(i)-x3f(j))/(abs(y1f(i)-y3f(j))))*rad;
    end
end
D13f=D13(:);
D13f=D13f';
% Assumption 3. |Dir12-Dir34| < ParallelThres 
for i=1:length(x2f)
    for j=1:length(x4f)
        D24(i,j)=90-atan(abs(x2f(i)-x4f(j))/(abs(y2f(i)-y4f(j))))*rad;
    end
end
D24f=D24(:);
D24f=D24f';
for i=1:length(D13f)
    for j=1:length(D24f)
        Z(i,j)=abs(D13f(i)-D24f(j));     % Apply parallel threshold
        if (Z(i,j)<=4) 
           D13ff(i)=D13f(i);
           D24ff(j)=D24f(j);
        end
    end
end
%Match combining edges
%Zero padding for applying final threshold        
g=abs(length(x1f)-length(D13ff));
if length(x1f)~=length(D13ff)
    x1ft=[x1f,zeros(1,g)];
    y1ft=[y1f,zeros(1,g)];
else
    x1ft=x1f;
    y1ft=y1f;
end
g2=abs(length(x3f)-length(D13ff));
if length(x3f)~=length(D13ff)
    x3ft=[x3f,zeros(1,g2)];
    y3ft=[y3f,zeros(1,g2)];
else
    x3ft=x3f;
    y3ft=y3f;
end
%Determine non zero co-ordinates
for i=1:length(D13ff)
     if (D13ff(i)~=0)
         x1cc(i)=x1ft(i);
         x3cc(i)=x3ft(i);
         y1cc(i)=y1ft(i);
         y3cc(i)=y3ft(i);
     else
         x1cc(i)=0;
         x3cc(i)=0;
         y1cc(i)=0;
         y3cc(i)=0;
     end
end
g0=abs(length(x2f)-length(D24ff));
if length(x2f)~=length(D24ff)
    x2ft=[x2f,zeros(1,g0)];
    y2ft=[y2f,zeros(1,g0)];
else
    x2ft=x2f;
    y2ft=y2f;
end
g1=abs(length(x4f)-length(D24ff));
if length(x4f)~=length(D24ff)
    x4ft=[x4f,zeros(1,g1)];
    y4ft=[y4f,zeros(1,g1)];
else
    x4ft=x4f;
    y4ft=y4f;
end
%Determine non-zero co-ordinates
for i=1:length(D24ff)
     if (D24ff(i)~=0)
         x2cc(i)=x2ft(i);
         x4cc(i)=x4ft(i);
         y2cc(i)=y2ft(i);
         y4cc(i)=y4ft(i);
     else
         x2cc(i)=0;
         x4cc(i)=0;
         y2cc(i)=0;
         y4cc(i)=0;
       
     end
end
x1c=x1cc(x1cc~=0);
y1c=y1cc(y1cc~=0);
x3c=x3cc(x3cc~=0);
y3c=y3cc(y3cc~=0);
x2c=x2cc(x2cc~=0);
y2c=y2cc(y2cc~=0);
x4c=x4cc(x4cc~=0);
y4c=y4cc(y4cc~=0);
 
%Determine Fill Ratio Fr(ij) and threshold it
%Fill Ratio Fr13
for i= 1:length(x1c)
    for j=1:length(x3c)
        xx13=[x1c(i)-2,x1c(i)+2,x3c(j)+2,x3c(j)-2]; % Determine mask co-ordinates
        yy13=[y1c(i)-2,y1c(i)+2,y3c(j)+2,y3c(j)-2];
        l13(i,j)=sqrt((x1c(i)-x3c(j))^2+(y1c(i)-y3c(j))^2); % Length of the edge combining ith and jth corners
        I1 = zeros(441, 600);
        J13=roipoly(I1,xx13,yy13); % Mask around the edge segment
        o13=0;
        for k=1:441
            for l=1:600
                if BWy(k,l)==1 & J13(k,l)==1
                    over13(k,l)=1;
                    o13=o13+1; % Length of overlap region
                else
                    over13(k,l)=0;
                end
            end
        end
        Fr13(i,j)=o13/l13(i,j); % Fill ratio
        if Fr13(i,j)>0.4 & Fr13(i,j)<1 %Threshold the fill ratio between 0.4 and 1
            x1cf(i,j)=x1c(1,i);
            y1cf(i,j)=y1c(1,i);
            x3cf(i,j)=x3c(1,j);
            y3cf(i,j)=y3c(1,j);
         else
            x1cf(i,j)=0;
            y1cf(i,j)=0;
            x3cf(i,j)=0;
            y3cf(i,j)=0;
        end
   end
end
x1fin=(x1cf(x1cf~=0));
y1fin=(y1cf(y1cf~=0));
x3fin=(x3cf(x3cf~=0));
y3fin=(y3cf(y3cf~=0));
 
%Fill Ratio Fr24
for i= 1:length(x2c)
    for j=1:length(x4c)
        x24=[x2c(i)-2,x2c(i)+2,x4c(j)+2,x4c(j)-2];  % Determine mask co-ordinates
        y24=[y2c(i)-2,y2c(i)+2,y4c(j)+2,y4c(j)-2];
        l24(i,j)=sqrt((x2c(i)-x4c(j))^2+(y2c(i)-y4c(j))^2);% Length of the edge combining ith and jth corners
        I2 = zeros(441, 600);
        J24=roipoly(I2,x24,y24);    % Mask around the edge segment
        o24=0;
        for k=1:441
            for l=1:600
                if BWy(k,l)==1 & J24(k,l)==1
                    over24(k,l)=1;
                    o24=o24+1;      % Length of overlap region
                else
                    over24(k,l)=0;
                end
            end
        end
        Fr24(i,j)=o24/l24(i,j);  %Fill Ratio
        if Fr24(i,j)>0.95 & Fr24(i,j)<1  %Threshold the fill ratio between 0.95 and 1
            x2cf(i,j)=x2c(1,i);
            y2cf(i,j)=y2c(1,i);
            x4cf(i,j)=x4c(1,j);
            y4cf(i,j)=y4c(1,j);
        else
            x2cf(i,j)=0;
            y2cf(i,j)=0;
            x4cf(i,j)=0;
            y4cf(i,j)=0;
        end
   end
end
x2fin=(x2cf(x2cf~=0));
y2fin=(y2cf(y2cf~=0));
x4fin=(x4cf(x4cf~=0));
y4fin=(y4cf(y4cf~=0));
 
figure(6)
imshow(I)
title('Detected door and knob')
hold on
p1=[x1fin x2fin x4fin x3fin x1fin];
p2=[y1fin y2fin y4fin y3fin y1fin];
disp('....................Displaying the detected door and the knob detected......................')
plot(p1, p2, 'b', 'LineWidth', 3);
disp('...........................The door corner candidates are...........................')
cx1=[x1fin x2fin x3fin x4fin]';
cx2=[y1fin y2fin y3fin y4fin]';
c=[cx1 cx2];
 
%KNOB DETECTION
if ~isempty(x5)
for i=1:c5
    for j=1:c5
        S5(i,j)=sqrt((x5(i)-x5(j))^2+(y5(i)-y5(j))^2); %Determine distance between detected corners
        if (S5(i,j)<=8 & S5(i,j)~=0 & S5(i,j)>6) %Select the corners by applying thresholds: UppTh=8, LowTh=6
            x1k(i,j)=x5(i);
            y1k(i,j)=y5(i);
        else
            x1k(i,j)=0;
            y1k(i,j)=0;
        end
    end
end
x5k=x1k(x1k~=0);
y5k=y1k(y1k~=0);
% Connecting the corners detected as knob with smoothly connected cubic Bezier segments
if (x5k ~=0 & y5k~=0)
    k1=[x5k y5k];
    [cp1,cp2]=findControlPoints(k1); 
    displayBezier(k1,cp1,cp2);
end
end
if ~isempty(x6)
for i=1:c6
    for j=1:c6
        S6(i,j)=sqrt((x6(i)-x6(j))^2+(y6(i)-y6(j))^2); %Determine distance between detected corners
        if (S6(i,j)<=8 & S6(i,j)~=0 & S6(i,j)>6) %Select the corners by applying thresholds: UppTh=8, LowTh=6
            x2k(i,j)=x6(i);
            y2k(i,j)=y6(i);
        else
            x2k(i,j)=0;
            y2k(i,j)=0;    
        end
    end
end
x6k=x2k(x2k~=0);
y6k=y2k(y2k~=0);
% Connecting the corners detected as knob with smoothly connected cubic Bezier segments
if (x6k ~=0 & y6k~=0)
    k2=[x6k y6k];
    [cp1,cp2]=findControlPoints(k2); 
    displayBezier(k2,cp1,cp2);
end
end


